    public SQLiteDatabase db;
    private DatabaseHelper myDb;
    private Context myContext;
    public static final String TAG = "DatabaseHelper";

    private static String DB_PATH = "";

    public static final String DATABASE_NAME = "driverph_truckerlearningph_quiz.db";
    public static final int DATABASE_VERSION = 1;

    public static final String Questions_TABLE_NAME = "tbl_questions";
    public static final String Answers_TABLE_NAME = "tbl_answers";
    public static final String Scores_TABLE_NAME = "tbl_scores";

    public static final String Question_id = "question_id";
    public static final String Question_text = "question_text";


    public static final String[] QuestionColumnList = {Question_id, Question_text};

    public static final String Answers_id = "answer_id";
    public static final String Answers_option = "answer_text";
    public static final String Answer_key = "isCorrect";

    public static final String[] AnswersColumnList = {Answers_id, Answers_option, Answer_key};

    public static final String Scores_id = "_score_id";
    public static final String Scores_username = "username";
    public static final String Scores_score = "score";
    public static final String Scores_item = "items ";
    public static final String Scores_course_code = "course_code";

    public static final String[] ScoresColumnList = {Scores_id, Scores_username, Scores_score, Scores_item, Scores_course_code};

    public DatabaseHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
        if (android.os.Build.VERSION.SDK_INT >= 17)
            DB_PATH = context.getApplicationInfo().dataDir + "/databases/";
        else
            DB_PATH = "/data/data/" + context.getPackageName() + "/databases/";
        this.myContext = context;

    }
    @Override
    public void onOpen(SQLiteDatabase db) {
        super.onOpen(db);
        db.disableWriteAheadLogging();
    }

    public void createDataBase() throws IOException {
        boolean dbExist = checkDataBase();
        if (dbExist) {
        } else {
            SQLiteDatabase db = this.getReadableDatabase();
            if (db.isOpen()){
                db.close();
            }
            try {
                copyDataBase();
            } catch (IOException e) {
                throw new Error("Error copying database");
            }
        }
    }

    private boolean checkDataBase() {
        SQLiteDatabase checkDB = null;
        try {
            String myPath = DB_PATH + DATABASE_NAME;
            checkDB = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READWRITE);
        } catch (SQLiteException e) {
            e.printStackTrace();
        }
        if (checkDB != null) {
            checkDB.close();
        }
        return checkDB != null;
    }

    private void copyDataBase() throws IOException {
        InputStream myInput = myContext.getAssets().open(DATABASE_NAME);
        String outFileName = DB_PATH + DATABASE_NAME;
        OutputStream myOutput = new FileOutputStream(outFileName);
        byte[] buffer = new byte[1024];
        int length;
        while ((length = myInput.read(buffer)) > 0) {
            myOutput.write(buffer, 0, length);
        }
        myOutput.flush();
        myOutput.close();
        myInput.close();
    }

    public void openDataBase() throws SQLException {
        String myPath = DB_PATH + DATABASE_NAME;
        db = SQLiteDatabase.openDatabase(myPath, null, SQLiteDatabase.OPEN_READWRITE);
    }

    @Override
    public synchronized void close() {
        if (db != null)
            db.close();
        super.close();
    }
    // creating database from assets ends here

    @Override
    public void onCreate(SQLiteDatabase db) {

    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        Log.w(TAG, "Upgrading database from version " + oldVersion + " to "
                + newVersion + ", which will destroy all old data");
        onCreate(db);
    }

    public Cursor getAllQuestions(){
        //ArrayList<Question> questionsList = new ArrayList<>();
        db = getReadableDatabase();
        String sqlQuery = "Select q.question_id, q.question_text, a.answer_text, a.answer_sequence, a.isCorrect\n" +
                "from " + Questions_TABLE_NAME + " q\n" +
                "left join " + Answers_TABLE_NAME +" a ON q.question_id = a.question_id\n" +
                "order by q.question_id;";

//        String sqlQuery = "SELECT * FROM " + Questions_TABLE_NAME;
        Cursor c = db.rawQuery(sqlQuery, null);

        if (c != null) {
            c.moveToFirst();
        }

        if (c.moveToFirst()){
            do{
                Question questions = new Question();
                questions.setQuestion(c.getString(1));
                questions.setOption1(c.getString(2));
                questions.setOption2(c.getString(3));
                questions.setOption3(c.getString(4));
                questions.setAnswer(c.getInt(5));
//                questionsList.add(questions);
            }while (c.moveToNext());
        }

        c.close();
        return c;
    }

